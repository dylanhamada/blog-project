{"version":3,"sources":["assets/icons/cross.svg","components/Display/TitleDisplay/TitleDisplay.module.css","assets/icons/chevron-down.svg","components/Actions/Actions.module.css","components/Actions/Action/Action.module.css","components/Input/InputHeader/InputHeader.module.css","assets/icons/pencil.svg","components/Display/DisplayBox/DisplayBox.module.css","components/Display/DateDisplay/DateDisplay.module.css","assets/icons/checkmark.svg","assets/icons/trash.svg","assets/icons/document-edit.svg","components/Input/Input.module.css","components/Input/TitleInput/TitleInput.module.css","components/Input/AuthorInput/AuthorInput.module.css","components/Input/BlogInput/BlogInput.module.css","components/Display/Display.module.css","components/Display/TextDisplay/TextDisplay.module.css","components/Post/Post.module.css","context/auth-context.js","components/Actions/Action/Action.js","components/Actions/Actions.js","components/Input/InputHeader/InputHeader.js","components/Input/TitleInput/TitleInput.js","components/Input/AuthorInput/AuthorInput.js","components/Input/BlogInput/BlogInput.js","components/Input/Input.js","components/Display/TitleDisplay/TitleDisplay.js","components/Display/TextDisplay/TextDisplay.js","components/Display/DateDisplay/DateDisplay.js","components/Display/DisplayBox/DisplayBox.js","components/Display/Display.js","components/Post/Post.js","containers/Blog/Blog.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","authContext","React","createContext","action","display","delete","input","post","showPost","submitEdit","submitNew","Action","props","clicked","icon","useContext","AuthContext","text","src","newPost","alt","type","id","cancelPost","getInput","acceptPost","editPost","deletePost","className","classes","onClick","Icon","Text","Actions","actionList","actionsStyle","screen","ActionsInput","InputHeader","headerText","closeInput","Header","chevron","ChevronClose","cross","CrossClose","TitleInput","value","title","autoComplete","defaultValue","placeholder","AuthorInput","author","BlogInput","body","Input","show","TitleDisplay","close","closeButton","showClose","blogTitle","TextDisplay","textBox","useRef","useEffect","boxHeight","current","offsetHeight","noGradient","gradientToggle","ref","blogText","DateDisplay","edited","blogEdited","blogAuthor","blogDate","DisplayBox","useState","boxClass","setClass","DisplayBoxLong","Display","blogPosts","posts","map","key","date","Post","maxHeight","Blog","state","inputType","singlePost","showDisplay","showInput","actionHandler","setState","axios","then","response","getData","get","data","newPosts","reversePosts","validate","document","querySelector","blogBody","moment","local","format","setPost","find","postId","newEdit","patch","resp","toggleDisplay","toggleInput","togglePost","this","reverseEntries","Object","keys","entry","unshift","actions","Fragment","Provider","Component","App","Boolean","window","location","hostname","match","defaults","baseURL","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2ac2df0e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cross.9e762e72.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TitleDisplay\":\"TitleDisplay_TitleDisplay__2bFNB\",\"ChevronClose\":\"TitleDisplay_ChevronClose__2Socq\",\"CrossClose\":\"TitleDisplay_CrossClose__4rlvt\"};","module.exports = __webpack_public_path__ + \"static/media/chevron-down.527456df.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Actions\":\"Actions_Actions__2rgID\",\"ActionsInput\":\"Actions_ActionsInput__eTH8o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Action\":\"Action_Action__1Fvmc\",\"Icon\":\"Action_Icon__2MIny\",\"Text\":\"Action_Text__1NZRq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"InputHeader_Header__Crw0W\",\"ChevronClose\":\"InputHeader_ChevronClose__2FiHy\",\"CrossClose\":\"InputHeader_CrossClose__r2QSt\"};","module.exports = __webpack_public_path__ + \"static/media/pencil.98e04e1c.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DisplayBox\":\"DisplayBox_DisplayBox__iKcqC\",\"DisplayBoxLong\":\"DisplayBox_DisplayBoxLong__SYKSq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DateDisplay\":\"DateDisplay_DateDisplay__-UuTL\",\"author\":\"DateDisplay_author__1nZny\"};","module.exports = __webpack_public_path__ + \"static/media/checkmark.d5f8da2a.svg\";","module.exports = __webpack_public_path__ + \"static/media/trash.79adcfd4.svg\";","module.exports = __webpack_public_path__ + \"static/media/document-edit.ddb003c3.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__2ZMeK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TitleInput\":\"TitleInput_TitleInput__3YQt9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AuthorInput\":\"AuthorInput_AuthorInput__wrUbu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"BlogInput\":\"BlogInput_BlogInput__hh8j8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Display\":\"Display_Display__MSwjf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TextDisplay\":\"TextDisplay_TextDisplay__3eKtW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Post\":\"Post_Post__2uao7\"};","import React from 'react';\r\n\r\nconst authContext = React.createContext({\r\n    action: () => { },\r\n    display: () => { },\r\n    delete: () => { },\r\n    input: () => { },\r\n    post: () => { },\r\n    showPost: () => { },\r\n    submitEdit: () => { },\r\n    submitNew: () => { }\r\n});\r\n\r\nexport default authContext;","import React, { useContext } from 'react';\r\n\r\nimport AuthContext from '../../../context/auth-context';\r\nimport classes from './Action.module.css';\r\n\r\nimport acceptPost from '../../../assets/icons/checkmark.svg';\r\nimport cancelPost from '../../../assets/icons/cross.svg';\r\nimport deletePost from '../../../assets/icons/trash.svg';\r\nimport editPost from '../../../assets/icons/document-edit.svg';\r\nimport newPost from '../../../assets/icons/pencil.svg';\r\n\r\nconst Action = props => {\r\n    const authContext = useContext(AuthContext);\r\n    let clicked;\r\n    let icon;\r\n\r\n    switch (props.text) {\r\n        case \"New Post\":\r\n            clicked = () => {\r\n                authContext.input(\"new\");\r\n                authContext.action(\"new\");\r\n                authContext.display();\r\n            };\r\n            icon = (<img src={newPost} alt=\"New Post\" />);\r\n            break;\r\n        case \"Cancel\":\r\n            // If editing a post, clicking Cancel renders Post component\r\n            if (props.type === \"edit\") {\r\n                clicked = () => {\r\n                    authContext.input();\r\n                    authContext.post(props.post.id);\r\n                    authContext.showPost();\r\n                }\r\n                // If creatinga new post, clicking Cancel renders Display component\r\n            } else {\r\n                clicked = () => {\r\n                    authContext.input();\r\n                    authContext.action(\"home\");\r\n                    authContext.display();\r\n                }\r\n            }\r\n            icon = (<img src={cancelPost} alt=\"Cancel\" />);\r\n            break;\r\n        case \"Accept\":\r\n            /* If clicking Accept while writing a new post, check if all inputs\r\n            are filled, and if true, make a POST request and render Display component */\r\n            if (props.type === \"new\") {\r\n                clicked = () => {\r\n                    let inputValid = authContext.getInput(\"validate\");\r\n\r\n                    if (inputValid) {\r\n                        authContext.submitNew();\r\n                        authContext.input();\r\n                        authContext.display();\r\n                        authContext.action(\"home\");\r\n                    }\r\n                }\r\n            } else {\r\n                clicked = () => {\r\n                    authContext.submitEdit();\r\n                    authContext.input();\r\n                    authContext.display();\r\n                    authContext.action(\"home\");\r\n                }\r\n            }\r\n            icon = (<img src={acceptPost} alt=\"Accept\" />);\r\n            break;\r\n        case \"Edit\":\r\n            icon = (<img src={editPost} alt=\"Edit\" />);\r\n            clicked = () => {\r\n                authContext.input(\"edit\");\r\n                authContext.action(\"edit\");\r\n                authContext.showPost();\r\n            };\r\n            break;\r\n        case \"Delete\":\r\n            icon = (<img src={deletePost} alt=\"Delete\" />);\r\n            clicked = () => {\r\n                authContext.delete();\r\n                authContext.showPost();\r\n                authContext.display();\r\n                authContext.action(\"home\");\r\n            };\r\n            break;\r\n        default:\r\n            clicked = () => {\r\n                authContext.input();\r\n                authContext.action(\"new\");\r\n                authContext.display();\r\n            };\r\n            icon = (<img src={newPost} alt=\"New Post\" />);\r\n            break;\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Action} onClick={clicked}>\r\n            <span className={classes.Icon}>\r\n                {icon}\r\n            </span>\r\n            <span className={classes.Text}>\r\n                {props.text}\r\n            </span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Action;","import React from 'react';\r\n\r\nimport classes from './Actions.module.css';\r\nimport Action from './Action/Action';\r\n\r\nconst Actions = props => {\r\n    let actionList;\r\n    let actionsStyle = classes.Actions;\r\n\r\n    // Render Action components depending on app state \"screen\" property\r\n    switch (props.screen) {\r\n        case 'home':\r\n            actionList = (\r\n                <Action text=\"New Post\" />\r\n            );\r\n            break;\r\n        case 'new':\r\n            actionList = (\r\n                <>\r\n                    <Action text=\"Cancel\" />\r\n                    <Action text=\"Accept\" type=\"new\" />\r\n                </>\r\n            );\r\n            actionsStyle = classes.ActionsInput;\r\n            break;\r\n        case 'edit':\r\n            actionList = (\r\n                <>\r\n                    <Action text=\"Cancel\" type=\"edit\" post={props.post} />\r\n                    <Action text=\"Accept\" type=\"edit\" />\r\n                </>\r\n            );\r\n            actionsStyle = classes.ActionsInput;\r\n            break;\r\n        case 'post':\r\n            actionList = (\r\n                <>\r\n                    <Action text=\"Edit\" />\r\n                    <Action text=\"Delete\" />\r\n                </>\r\n            );\r\n            break;\r\n        default:\r\n            actionList = (\r\n                <Action text=\"New Post\" />\r\n            );\r\n            break;\r\n    }\r\n\r\n    return (\r\n        <div className={actionsStyle}>\r\n            {actionList}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Actions;","import React, { useContext } from 'react';\r\n\r\nimport AuthContext from '../../../context/auth-context';\r\n\r\nimport classes from './InputHeader.module.css';\r\n\r\nimport chevron from '../../../assets/icons/chevron-down.svg';\r\nimport cross from '../../../assets/icons/cross.svg';\r\n\r\nconst InputHeader = props => {\r\n    const authContext = useContext(AuthContext);\r\n    let headerText;\r\n    let closeInput = () => {\r\n        authContext.input();\r\n        authContext.action(\"home\");\r\n        authContext.display();\r\n    };\r\n\r\n    // If editing an existing post, clicking the \"close\" button will render the individual Posts component\r\n    if (props.type === \"new\") {\r\n        headerText = \"New Post\";\r\n    } else {\r\n        headerText = \"Edit Post\";\r\n        closeInput = () => {\r\n            authContext.input();\r\n            authContext.post(props.post.id);\r\n            authContext.showPost();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Header}>\r\n            <h2>{headerText}</h2>\r\n            <img src={chevron} className={classes.ChevronClose} onClick={closeInput} alt=\"close\" />\r\n            <img src={cross} className={classes.CrossClose} onClick={closeInput} alt=\"close\" />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default InputHeader;","import React from 'react';\r\n\r\nimport classes from './TitleInput.module.css';\r\n\r\nconst TitleInput = props => {\r\n    let value = (props.type === \"edit\") ? props.post.title : \"\";\r\n\r\n    return (\r\n        <div className={classes.TitleInput}>\r\n            <p>Title</p>\r\n            <input\r\n                autoComplete=\"off\"\r\n                defaultValue={value}\r\n                id=\"blogTitle\"\r\n                placeholder=\"Enter the blog title here\">\r\n            </input>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TitleInput;","import React from 'react';\r\n\r\nimport classes from './AuthorInput.module.css';\r\n\r\nconst AuthorInput = props => {\r\n    let value = (props.type === \"edit\") ? props.post.author : \"\";\r\n\r\n    return (\r\n        <div className={classes.AuthorInput}>\r\n            <p>Author</p>\r\n            <input\r\n                autoComplete=\"off\"\r\n                defaultValue={value}\r\n                id=\"blogAuthor\"\r\n                placeholder=\"Enter your name here\">\r\n            </input>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AuthorInput;","import React from 'react';\r\n\r\nimport classes from './BlogInput.module.css';\r\n\r\nconst BlogInput = props => {\r\n    let value = (props.type === \"edit\") ? props.post.body : \"\";\r\n\r\n    return (\r\n        <div className={classes.BlogInput}>\r\n            <p>Blog Text</p>\r\n            <textarea\r\n                autoComplete=\"off\"\r\n                defaultValue={value}\r\n                id=\"blogBody\"\r\n                placeholder=\"Enter the blog text here\">\r\n            </textarea>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BlogInput;","import React from 'react';\r\n\r\nimport classes from './Input.module.css';\r\nimport InputHeader from './InputHeader/InputHeader';\r\nimport TitleInput from './TitleInput/TitleInput';\r\nimport AuthorInput from './AuthorInput/AuthorInput';\r\nimport BlogInput from './BlogInput/BlogInput';\r\n\r\nconst Input = props => {\r\n    let post = props.post ? props.post : null;\r\n\r\n    let input = props.show ? (\r\n        <div className={classes.Input}>\r\n            <InputHeader type={props.type} post={post} />\r\n            <TitleInput type={props.type} post={post} />\r\n            <AuthorInput type={props.type} post={post} />\r\n            <BlogInput type={props.type} post={post} />\r\n        </div>\r\n    ) : null;\r\n\r\n    return (\r\n        <>\r\n            {input}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Input;","import React, { useContext } from 'react';\r\n\r\nimport AuthContext from '../../../context/auth-context';\r\n\r\nimport classes from './TitleDisplay.module.css';\r\n\r\nimport chevron from '../../../assets/icons/chevron-down.svg';\r\nimport cross from '../../../assets/icons/cross.svg';\r\n\r\nconst TitleDisplay = props => {\r\n    const authContext = useContext(AuthContext);\r\n    // When TitleDisplay rendered as a child of Post component, close it\r\n    const close = () => {\r\n        authContext.action(\"home\");\r\n        authContext.display();\r\n        authContext.showPost();\r\n    };\r\n    let closeButton = null;\r\n\r\n    // Render close icons when TitleDisplay rendered as child of Post component\r\n    if (props.showClose) {\r\n        closeButton = (\r\n            <>\r\n                <img src={chevron} className={classes.ChevronClose} onClick={close} alt=\"close\" />\r\n                <img src={cross} className={classes.CrossClose} onClick={close} alt=\"close\" />\r\n            </>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className={classes.TitleDisplay}>\r\n            <h2 className={classes.TitleDisplay}>{props.blogTitle}</h2>\r\n            {closeButton}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TitleDisplay;","import React, { useEffect, useRef } from 'react';\r\n\r\nimport classes from './TextDisplay.module.css';\r\n\r\nconst TextDisplay = props => {\r\n    const textBox = useRef(null);\r\n\r\n    /* Check if rendered paragraph element is taller than 149 pixels,\r\n    and if true, call gradientToggle to apply a white gradient overlay */\r\n    useEffect(() => {\r\n        const boxHeight = textBox.current.offsetHeight;\r\n\r\n        if (!props.noGradient) {\r\n            if (boxHeight > 149) { props.gradientToggle() }\r\n        }\r\n    });\r\n\r\n    return (\r\n        <p className={classes.TextDisplay} ref={textBox}>{props.blogText}</p>\r\n    );\r\n};\r\n\r\nexport default TextDisplay;","import React from 'react';\r\n\r\nimport classes from './DateDisplay.module.css';\r\n\r\nconst DateDisplay = props => {\r\n    // If \"edited\" property in app state singlePost property, prepend the following\r\n    let edited = props.blogEdited ? \"edited \" : null;\r\n\r\n    return (\r\n        <p className={classes.DateDisplay}>{edited}by <span className={classes.author}>{props.blogAuthor}</span> on {props.blogDate}</p>\r\n    );\r\n}\r\n\r\nexport default DateDisplay;","import React, { useContext, useState } from 'react';\r\n\r\nimport AuthContext from '../../../context/auth-context';\r\nimport classes from './DisplayBox.module.css';\r\n\r\nimport TitleDisplay from './../TitleDisplay/TitleDisplay';\r\nimport TextDisplay from './../TextDisplay/TextDisplay';\r\nimport DateDisplay from './../DateDisplay/DateDisplay';\r\n\r\nconst DisplayBox = props => {\r\n    const authContext = useContext(AuthContext);\r\n    const [boxClass, setClass] = useState(classes.DisplayBox);\r\n    // Set CSS class to one with white gradient overlay\r\n    const gradientToggle = () => {\r\n        setClass(classes.DisplayBoxLong);\r\n    };\r\n    // Render just the clicked post in a Post component and unmount Display component\r\n    const boxClick = id => {\r\n        authContext.post(id);\r\n        authContext.display();\r\n        authContext.showPost();\r\n    };\r\n\r\n    return (\r\n        <div className={boxClass} onClick={() => boxClick(props.id)}>\r\n            <TitleDisplay blogTitle={props.blogTitle} />\r\n            <DateDisplay blogAuthor={props.blogAuthor} blogDate={props.blogDate} blogEdited={props.blogEdited} />\r\n            <TextDisplay blogText={props.blogText} gradientToggle={gradientToggle} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DisplayBox;","import React from 'react';\r\n\r\nimport classes from './Display.module.css';\r\nimport DisplayBox from './DisplayBox/DisplayBox';\r\n\r\nconst Display = props => {\r\n    let blogPosts = null;\r\n\r\n    /* If app state showDisplay prop is true, and app state posts prop\r\n    is not falsy, create an array of DisplayBox components */\r\n    if (props.show) {\r\n        if (props.posts) {\r\n            blogPosts = props.posts.map(post => (\r\n                <DisplayBox\r\n                    key={post.id}\r\n                    id={post.id}\r\n                    blogTitle={post.title}\r\n                    blogDate={post.date}\r\n                    blogAuthor={post.author}\r\n                    blogText={post.body}\r\n                    blogEdited={post.edited} />\r\n            ));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Display}>\r\n            {blogPosts}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Display;","import React from 'react';\r\n\r\nimport classes from './Post.module.css';\r\n\r\nimport TitleDisplay from './../Display/TitleDisplay/TitleDisplay';\r\nimport DateDisplay from './../Display/DateDisplay/DateDisplay';\r\nimport TextDisplay from './../Display/TextDisplay/TextDisplay';\r\n\r\nconst Post = props => {\r\n    let post = null;\r\n\r\n    if (props.post && props.show) {\r\n        post = (\r\n            <>\r\n                <TitleDisplay blogTitle={props.post.title} showClose />\r\n                <DateDisplay blogAuthor={props.post.author} blogDate={props.post.date} blogEdited={props.post.edited} />\r\n                <TextDisplay blogText={props.post.body} noGradient maxHeight />\r\n            </>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Post}>\r\n            {post}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Post;\r\n\r\n","import React, { Component } from 'react';\r\n\r\nimport axios from 'axios';\r\nimport moment from 'moment';\r\n\r\nimport AuthContext from '../../context/auth-context';\r\nimport Actions from '../../components/Actions/Actions';\r\nimport Input from '../../components/Input/Input';\r\nimport Display from '../../components/Display/Display';\r\nimport Post from '../../components/Post/Post';\r\n\r\nclass Blog extends Component {\r\n    state = {\r\n        inputType: null,\r\n        posts: null,\r\n        screen: 'home',\r\n        singlePost: null,\r\n        showDisplay: true,\r\n        showInput: false,\r\n        showPost: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getData();\r\n    }\r\n\r\n    // Change state screen property to determine what icons/buttons are rendered in Actions component\r\n    actionHandler = action => {\r\n        this.setState({ screen: action });\r\n    }\r\n\r\n    deletePost = () => {\r\n        axios.delete('/posts/' + this.state.singlePost.id + '.json')\r\n            .then((response) => {\r\n                if (response) {\r\n                    this.getData();\r\n                }\r\n            });\r\n    }\r\n\r\n    // Set state posts property which is passed as props to Display component\r\n    getData = () => {\r\n        axios.get('/posts.json')\r\n            .then(response => {\r\n                if (response.data) {\r\n                    const newPosts = this.reversePosts(response.data);\r\n                    this.setState({ posts: newPosts });\r\n                } else {\r\n                    this.setState({ posts: null });\r\n                }\r\n            });\r\n    }\r\n\r\n    getInput = validate => {\r\n        const blogTitle = document.querySelector(\"#blogTitle\");\r\n        const blogBody = document.querySelector(\"#blogBody\");\r\n        const blogAuthor = document.querySelector(\"#blogAuthor\");\r\n        const blogDate = moment().local().format(\"dddd, MMMM D [at] h[:]mm a\");\r\n        let newPost = null;\r\n\r\n        if (blogTitle.value && blogAuthor.value && blogBody.value) {\r\n            newPost = {\r\n                title: blogTitle.value,\r\n                author: blogAuthor.value,\r\n                body: blogBody.value,\r\n                date: blogDate\r\n            };\r\n\r\n            if (validate !== \"validate\") {\r\n                blogTitle.value = \"\";\r\n                blogAuthor.value = \"\";\r\n                blogBody.value = \"\";\r\n            }\r\n        }\r\n\r\n        return newPost;\r\n    }\r\n\r\n    /* Reverse order of blog posts in state posts property to render \r\n    posts to Display component newest first */\r\n    reversePosts(posts) {\r\n        const reverseEntries = [];\r\n\r\n        for (let entry of Object.keys(posts)) {\r\n            const post = {\r\n                ...posts[entry],\r\n                id: entry\r\n            };\r\n\r\n            reverseEntries.unshift(post);\r\n        }\r\n\r\n        return reverseEntries;\r\n    }\r\n\r\n    // Set state singlePost property to pass as props to Post component\r\n    setPost = id => {\r\n        const singlePost = this.state.posts.find(post => post.id === id);\r\n\r\n        this.actionHandler(\"post\");\r\n        this.setState({ singlePost: singlePost });\r\n    }\r\n\r\n    /* Patch the property in the database \"posts\" node, but add an \"edited\"\r\n    property to pass as props to the DateDisplay component, which will\r\n    prefix some text to the author line */\r\n    submitEdit = () => {\r\n        const postId = this.state.singlePost.id;\r\n        let newEdit = this.getInput();\r\n\r\n        if (newEdit) {\r\n            axios.patch(\r\n                '/posts/' + postId + '.json',\r\n                {\r\n                    title: newEdit.title,\r\n                    author: newEdit.author,\r\n                    body: newEdit.body,\r\n                    date: newEdit.date,\r\n                    edited: true\r\n                }\r\n            )\r\n                .then((resp) => {\r\n                    if (resp) {\r\n                        this.getData();\r\n                    }\r\n                    this.setState({ showInput: false, showDisplay: true, screen: 'home' });\r\n                });\r\n        }\r\n    }\r\n\r\n    submitNew = () => {\r\n        let newPost = this.getInput();\r\n\r\n        if (newPost) {\r\n            axios.post('/posts.json', newPost)\r\n                .then(response => {\r\n                    if (response) {\r\n                        this.getData();\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    toggleDisplay = () => {\r\n        let toggleDisplay = this.state.showDisplay;\r\n        toggleDisplay = !toggleDisplay;\r\n        this.setState({ showDisplay: toggleDisplay });\r\n    }\r\n\r\n    toggleInput = type => {\r\n        let toggleInput = this.state.showInput;\r\n        toggleInput = !toggleInput;\r\n\r\n        this.setState({ inputType: type });\r\n        this.setState({ showInput: toggleInput });\r\n    }\r\n\r\n    togglePost = () => {\r\n        let togglePost = this.state.showPost;\r\n        togglePost = !togglePost;\r\n        this.setState({ showPost: togglePost });\r\n    }\r\n\r\n    render() {\r\n        // Map methods to new properties, then pass to Context\r\n        const actions = {\r\n            action: this.actionHandler,\r\n            display: this.toggleDisplay,\r\n            delete: this.deletePost,\r\n            getInput: this.getInput,\r\n            input: this.toggleInput,\r\n            post: this.setPost,\r\n            showPost: this.togglePost,\r\n            submitEdit: this.submitEdit,\r\n            submitNew: this.submitNew,\r\n        };\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <AuthContext.Provider value={actions}>\r\n                    <Input show={this.state.showInput} type={this.state.inputType} post={this.state.singlePost} />\r\n                    <Actions screen={this.state.screen} post={this.state.singlePost} />\r\n                    <Display posts={this.state.posts} show={this.state.showDisplay} />\r\n                    <Post post={this.state.singlePost} show={this.state.showPost} />\r\n                </AuthContext.Provider>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Blog;","import React, { Component } from 'react';\n\nimport './App.css';\nimport Blog from './containers/Blog/Blog';\n\nclass App extends Component {\n    render() {\n        return (\n            <Blog />\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport axios from 'axios';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\naxios.defaults.baseURL = \"https://blog-project-19c30.firebaseio.com/\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}